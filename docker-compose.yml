version: '2'
services:

  wait:
    # just use same image as another container, no extra download
    image: node:8.11.1
    command: >
      sh -c "

      echo 'Waiting for database...' &&
      wait-for-it -q -t 0 db:5432 &&
      echo '... database ready' &&

      echo 'Waiting for backend...' &&
      wait-for-it -q -t 0 backend:8000 &&
      echo '... backend ready' &&

      echo 'Waiting for frontend...' &&
      wait-for-it -q -t 0 frontend:8080 &&
      echo '... frontend ready' &&

      echo 'All ready! Go and visit http://localhost:8080 :)'
      "
    volumes:
    - ./docker/wait/wait-for-it:/usr/local/bin/wait-for-it

  frontend:
    image: node:8.11.1
    command: >
      sh -c "
      yarn &&
      yarn dev
      "
    environment:
      BACKEND: http://backend:8000
    expose:
      - 8080
    ports:
      - 8080:8080
    volumes:
      - ./karrot-frontend:/app
      - ./docker/frontend/.env:/app/.env
      - node_modules:/app/node_modules
      - yarn-cache:/usr/local/share/.cache/yarn
    working_dir: /app

  backend:
    image: python:3.5.3
    # Why /usr/local/bin/pip install virtualenv?
    #   env/bin is at front of path so pip-sync would uninstall it
    # Why use virtualenv inside docker?
    #   See https://hynek.me/articles/virtualenv-lives/
    # What is entr?
    #   For rerunning tests on code change, see README.md
    command: >
      bash -c "
      (command -v virtualenv || /usr/local/bin/pip install virtualenv) &&
      (test -d env/bin || virtualenv --no-site-packages env) &&
      (test -f env/bin/pip-sync || env/bin/pip install pip-tools) &&
      (command -v entr || apt-get update && apt-get install -y entr) &&
      echo 'source env/bin/activate' >  ~/.bashrc &&
      source env/bin/activate &&
      ./sync.py &&
      ./manage.py migrate &&
      ./manage.py runserver 0.0.0.0:8000
      "
    ports:
      - 8000:8000
    volumes:
      - ./karrot-backend:/app
      - ./docker/backend/local_settings.py:/app/config/local_settings.py
      - virtualenv:/app/env
      - pip-cache:/root/.cache/pip/
    environment:
      PYTHONUNBUFFERED: 1
      REDIS_HOST: redis
      PATH: /app/env/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    working_dir: /app

  huey:
    image: python:3.5.3
    restart: always
    command: >
      sh -c "
      (command -v entr || apt-get update && apt-get install -y entr) &&
      wait-for-it -q -t 0 backend:8000 &&
      find foodsaving -name '*.py' | entr -r env/bin/python manage.py run_huey
      "
    volumes:
      - ./karrot-backend:/app
      - ./docker/backend/local_settings.py:/app/config/local_settings.py
      - virtualenv:/app/env
      - pip-cache:/root/.cache/pip/
      - ./docker/wait/wait-for-it:/usr/local/bin/wait-for-it
    environment:
      REDIS_HOST: redis
    working_dir: /app
    depends_on:
      - backend

  db:
    image: postgres:9.6.3
    ports:
      - 15432:5432
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: db
      POSTGRES_USER: db
      POSTGRES_DB: db

  mjml:
    image: node:8.11.1
    working_dir: /app/mjml
    command: sh -c 'yarn && ./convert --watch'
    ports:
      - 8001:8001
    volumes:
      - ./karrot-backend:/app
      - mjml-node_modules:/app/mjml/node_modules

  redis:
    image: redis:3.0.7-alpine

  influxdb:
    image: influxdb:1.3.3-alpine
    # a bit hacky way to create the database
    command: >
      sh -c "
      (sleep 3 && influx -execute 'CREATE DATABASE fstool') &
      influxd -config /etc/influxdb/influxdb.toml
      "
    ports:
      - 8083:8083
      - 8086:8086
    environment:
      INFLUXDB_ADMIN_ENABLED: "true"
    volumes:
      - influxdb:/var/lib/influxdb
      - ./docker/influxdb/influxdb.toml:/etc/influxdb/influxdb.toml

  grafana:
    image: grafana/grafana:4.6.3
    ports:
      - 4000:3000
    volumes:
      - grafana:/var/lib/grafana

  maildev:
    image: djfarrelly/maildev:1.0.0-rc2
    ports:
      - 1080:80

  pgweb:
    image: sosedoff/pgweb
    ports:
      - 5050:8081
    environment:
      DATABASE_URL: postgres://db:db@db:5432/db?sslmode=disable
    links:
      - db
    depends_on:
      - db

volumes:
  virtualenv:
  pip-cache:
  yarn-cache:
  node_modules:
  mjml-node_modules:
  database:
  influxdb:
  grafana:
